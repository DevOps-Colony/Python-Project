name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  AWS_REGION: us-west-2
  AWS_DEFAULT_REGION: us-west-2
  ECR_REPOSITORY: flask-auth-app
  HELM_CHART_PATH: ./helm/python-app
  SONAR_PROJECT_KEY: DevOps-Colony_Python-Project
  SONAR_ORGANIZATION: DevOps-Colony
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/flask-auth-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Python dependencies
        run: pip install -r backend/requirements.txt

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE/backend" >> $GITHUB_ENV

      - name: Run unit tests
        run: pytest tests/

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:latest
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectKey: ${{ env.SONAR_PROJECT_KEY }}
          organization: ${{ env.SONAR_ORGANIZATION }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE }} ./backend

      - name: Push Docker image
        run: docker push ${{ env.DOCKER_IMAGE }}

      - name: Deploy infrastructure with Terraform
        run: |
          terraform -chdir=terraform/staging init -backend-config=../backend-config/backend-config-staging.tfvars
          terraform -chdir=terraform/staging apply -auto-approve -var-file=../backend-config/backend-config-staging.tfvars

      - name: Deploy application using Helm
        run: |
          helm upgrade --install flask-auth-app ${{ env.HELM_CHART_PATH }} \
            --set image.repository=${{ env.DOCKER_IMAGE }} \
            --set image.tag=latest \
            --namespace flask --create-namespace
