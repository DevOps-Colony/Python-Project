name: CI/CD Pipeline - Flask Auth App

on:
  push:
    branches: [main]
  pull_request:

env:
  AWS_REGION: us-west-2
  AWS_DEFAULT_REGION: us-west-2
  ECR_REPOSITORY: flask-auth-app
  HELM_CHART_PATH: ./helm/python-app
  SONAR_PROJECT_KEY: DevOps-Colony_Python-Project
  SONAR_ORGANIZATION: DevOps-Colony
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/flask-auth-app

jobs:
  build:
    name: üîß Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v3

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: üß™ Run Unit Tests
        run: |
          python -m unittest discover -s tests -p "*.py"

      - name: üß™ SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectKey: ${{ env.SONAR_PROJECT_KEY }}
          organization: ${{ env.SONAR_ORGANIZATION }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: üß™ Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:latest
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library
        continue-on-error: true

      - name: üê≥ Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üê≥ Build and Push Docker Image
        run: |
          docker build -t $DOCKER_IMAGE:latest .
          docker push $DOCKER_IMAGE:latest

  deploy:
    name: üöÄ Deploy to EKS via Helm
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v3

      - name: üß∞ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚ò∏Ô∏è Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.29.2

      - name: ‚ò∏Ô∏è Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name flask-app-cluster-staging

      - name: üì¶ Deploy with Helm
        run: |
          helm upgrade --install flask-auth-release $HELM_CHART_PATH \
            --set image.repository=$DOCKER_IMAGE \
            --set image.tag=latest \
            --namespace default \
            --create-namespace

      - name: üì° Output ALB URL
        run: |
          kubectl get svc -n default
