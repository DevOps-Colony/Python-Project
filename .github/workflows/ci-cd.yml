name: 🚀 CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  AWS_REGION: us-west-2
  AWS_DEFAULT_REGION: us-west-2
  ECR_REPOSITORY: flask-auth-app
  HELM_CHART_PATH: ./helm/python-app
  SONAR_PROJECT_KEY: DevOps-Colony_Python-Project
  SONAR_ORGANIZATION: DevOps-Colony
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/flask-auth-app

jobs:
  build:
    name: 🔨 Build
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: ✅ Run Unit Tests
        run: |
          pytest tests/

  scan:
    name: 🔍 Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🐳 Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:latest
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library

  sonarcloud:
    name: 📊 SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: ☁️ SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectKey: ${{ env.SONAR_PROJECT_KEY }}
          organization: ${{ env.SONAR_ORGANIZATION }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, scan]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🐳 Build and Push Docker Image
        run: |
          docker build -t $DOCKER_IMAGE:latest .
          docker push $DOCKER_IMAGE:latest

  deploy:
    name: 🚀 Deploy to EKS
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 📦 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ⛓️ Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: ⛓️ Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.0

      - name: 🎯 Update kubeconfig
        run: |
          aws eks update-kubeconfig --name flask-app-cluster-staging --region $AWS_REGION

      - name: 🚀 Deploy using Helm
        run: |
          helm upgrade --install flask-auth-app $HELM_CHART_PATH --namespace default --create-namespace \
            --set image.repository=$DOCKER_IMAGE \
            --set image.tag=latest
